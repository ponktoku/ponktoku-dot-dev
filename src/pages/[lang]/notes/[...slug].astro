---
import ArticleLayout from "@/layouts/ArticleLayout.astro";
import { getCollection, type CollectionEntry, render } from "astro:content";
import Prose from "@/components/Prose.astro";
import { multiFormatDate } from "@/lib/utils";
import { useTranslations, type Lang } from "@/lib/i18n";
import BaseRightAside from "@/components/BaseRightAside.astro";
import TableOfContents from "@/components/TableOfContents.astro";
import { type THeadings } from "@/lib/types";

// interface Props {
//   note: CollectionEntry<"notes">;
// }

const locale = Astro.currentLocale as Lang;
const t = useTranslations(locale);

export async function getStaticPaths() {
  const notes: CollectionEntry<"notes">[] = await getCollection("notes");

  return notes.map((note) => {
    const [lang, ...slug] = note.id.split("/");
    return { params: { lang, slug: slug.join("/") || undefined }, props: note };
  });
}

const { lang }: { lang: string } = Astro.params;
const note = Astro.props;

if (!note) {
  return Astro.redirect(`/${lang}/404`);
}

const { Content, remarkPluginFrontmatter, headings } = await render(note);
const title: string = note.data.title;
const date = multiFormatDate(note.data.pubDate);

const validHeadings = headings.filter(
  (heading: THeadings) => heading.depth === 2 || heading.depth === 3,
);
---

<ArticleLayout {title}>
  <div class="mt-14">
    <ul class="mb-5 flex flex-wrap gap-2">
      {
        note.data.tags.map((tag: string) => {
          return (
            <li>
              <a
                href={`/${lang}/tag/${tag}`}
                class="cursor-pointer rounded-full bg-hool-white-200 px-3 py-1 transition-colors hover:bg-hool-white-300 dark:bg-ak-black-300 dark:hover:bg-hool-white-200 dark:hover:text-hool-text-emphasis"
              >
                {tag}
              </a>
            </li>
          );
        })
      }
    </ul>

    <h1
      class="mb-1 text-2xl font-bold text-hool-turquoise-300 dark:text-ak-blue"
    >
      {note.data.title}
    </h1>
    <h2 class="mb-1 text-black dark:text-white">{note.data.description}</h2>

    <div class="mb-3">
      {
        lang === "en" && (
          <time datetime={note.data.pubDate.toISOString()} class="text-sm">
            {date}
          </time>
        )
      }

      {
        lang === "ja" && (
          <time
            datetime={note.data.pubDate.toISOString()}
            class="text-sm text-hool-grey-light dark:text-ak-black-400"
          >
            {note.data.pubDate.toLocaleDateString(lang)}
          </time>
        )
      }

      <span class="inline-block text-sm"
        >・ {remarkPluginFrontmatter.minutesRead}</span
      >
    </div>

    {
      note.data.updatedDate && (
        <div class="mt-6 rounded-md border border-teal-500 bg-teal-600/20 px-4 py-2 text-sm text-teal-800 dark:border-blue-500 dark:bg-blue-600/20 dark:text-blue-200 sm:text-base">
          <span class="font-semibold">
            {t({ en: "Last updated: ", ja: "更新: " })}
          </span>
          <time
            datetime={note.data.updatedDate.toISOString()}
            class="font-light"
          >
            {note.data.updatedDate.toLocaleDateString(lang)}
          </time>
        </div>
      )
    }
  </div>

  {
    validHeadings.length > 0 && (
      <BaseRightAside>
        <TableOfContents headings={validHeadings} />
      </BaseRightAside>
    )
  }

  <Prose className="mt-12">
    <Content />
  </Prose>
</ArticleLayout>
